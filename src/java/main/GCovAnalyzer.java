package edu.gatech.cc.debcov;

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.io.File;
import org.apache.commons.io.FileUtils;

public class GCovAnalyzer
{
    /* .gcov file must be generated by gcov -i SRC. */
    public static void main(String[] args) {
	File gcov_f = new File(args[0]);
	String anal_type = args[1];
	if ("getlcov".equals(anal_type) || "getlall".equals(anal_type)) {
	    //Get covered or all lines (concatenated by commas). Ignore all the counts.
	    System.out.println(getLineCoverage(gcov_f, anal_type));
	}
	else if ("getbcov".equals(anal_type)) {
	    //Map count to either 0 (non-covered) or 1 (covered)
	    System.out.println(getBinaryGCovFileContent(gcov_f));
	}
	else {
	    System.out.println("Unknown analyzing type: " + anal_type);
	}
    }

    public static String getBinaryGCovFileContent(File gcov_f) {
	List<String> gcov_flines = null;
        try { gcov_flines = FileUtils.readLines(gcov_f); }
        catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
        if (gcov_flines == null) { return null; }
	
	StringBuilder sb = null;
	int gcov_flines_size = gcov_flines.size();
	for (int i=0; i<gcov_flines_size; i++) {
	    String gcov_fline = gcov_flines.get(i).trim();
	    if (gcov_fline.startsWith("function:") || gcov_fline.startsWith("lcount:")) {
		String[] elems = gcov_fline.split(",");
		String new_fline = elems[0];
		if ("0".equals(elems[1])) { new_fline += ",0"; }
		else { new_fline += ",1"; }
		for (int j=2; j<elems.length; j++) { new_fline += "," + elems[j]; }

		if (sb == null) { sb = new StringBuilder(); }
		else { sb.append("\n"); }
		sb.append(new_fline);
	    }
	    else {
		if (sb == null) { sb = new StringBuilder(); }
		else { sb.append("\n"); }
		sb.append(gcov_fline);
	    }
	}

	return (sb == null) ? null : sb.toString();
    }

    //Ignore all function parts
    public static String getLineCoverage(File gcov_f, String anal_type) {
	List<String> gcov_flines = null;
	try { gcov_flines = FileUtils.readLines(gcov_f); }
	catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	if (gcov_flines == null) { return null; }

	StringBuilder sb = null;
	for (String gcov_fline : gcov_flines) {
	    gcov_fline = gcov_fline.trim();
	    if (gcov_fline.startsWith("file:")) {
		String fpath = gcov_fline.split(":")[1];
		sb = new StringBuilder();
		sb.append(fpath);
	    }
	    else if (gcov_fline.startsWith("lcount:")) {
		String lno = gcov_fline.substring(gcov_fline.indexOf(":")+1, gcov_fline.indexOf(","));
		if ("getlall".equals(anal_type)) {
		    if (sb != null) { sb.append("," + lno); }
		    else { System.err.println("File path not found before adding line numbers."); }
		}
		else if ("getlcov".equals(anal_type)) {
		    int lc = Integer.parseInt(gcov_fline.split(",")[1]);
		    if (lc > 0) { //Line is covered
			if (sb != null) { sb.append("," + lno); }
			else { System.err.println("File path not found before adding line numbers."); }
		    }
		}
	    }
	}

	return (sb == null) ? null : sb.toString();
    }
}
